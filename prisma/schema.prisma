// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  status      PostStatus @default(DRAFT)
  author      String     @default("newsletter-app-editor")
  publishedAt DateTime?
  createdBy   String @default("newsletter-app")
  updatedBy   String @default("newsletter-app")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  jobs        Job[]

  @@index([status, publishedAt])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

model Subscriber {
  id        String      @id @default(cuid())
  email     String      @unique
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum JobType {
  POST_PUBLICATION
  POST_EMAIL_NOTIFICATION
}

enum JobStatus {
  PENDING
  COMPLETED
  FAILED
}

model Job {
  id          String    @id @default(cuid())
  postId      String
  jobType     JobType
  scheduledAt DateTime
  status      JobStatus @default(PENDING)
  createdBy   String @default("newsletter-app")
  updatedBy   String @default("newsletter-app")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([postId])
  @@index([status, scheduledAt])
  @@index([jobType, status])
}

